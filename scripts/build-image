#!/bin/bash

# Configure the script to exit when a command fails.
set -e

# ===== CONSTANTS =====

source "$(dirname $0)"/constants.sh

# ===== HELPER FUNCTIONS =====

source "$(dirname $0)"/util.sh

description() {
	cat <<EOF
${Bold}Builds the Prose Pod API Docker image.${Bold_Off}

By default, the Docker image will be named $(format_code ${PROSE_POD_API_IMAGE:?}) but you can override
this by defining $(format_code PROSE_POD_API_IMAGE). This script also allows cross-compiling for a different
platform (see the list of supported platforms using $(format_code 'docker buildx ls')).
EOF
}

usage() {
	cat <<EOF
$(format_title 'Usage:')
  You want to build $(format_code ${PROSE_POD_API_IMAGE:?}) for a local usage:
    $(format_command $(basename $0)) $(format_opt_arg '--|local') $(format_opt_arg --debug)
  You want to build the Prose Pod API for a different platform:
    $(format_command $(basename $0)) $(format_arg TARGET_PLATFORM) $(format_opt_arg --debug)

$(format_title 'Positional arguments:')
  $(format_opt_arg TARGET_PLATFORM)
    The platform to compile for.
    $(format_secondary "See the list of supported targets via $(format_code 'docker buildx ls').")
    $(format_secondary "You can also pass $(format_code '--') or $(format_code 'local') if you don't want to cross-compile.")

$(format_title 'Options:')
  $(format_subtitle 'Build phase options:')
    $(format_flag --debug)
      Builds the Prose Pod API in debug mode.
    $(format_flag --no-pull)
      Do not pull referenced Docker images.
      $(format_secondary "Speeds up the builds and does not use the network, but does not update base images.")

  $(format_subtitle 'Miscellaneous options:')
    $(format_flag --help)
      Explains what the command does and how to use it.
EOF
	# NOTE: Outdated documentation, kept for when we'll reintroduce this flag.
	# $(format_flag --offline)
	#   Run without accessing the network. Implies $(format_flag --no-pull).
	#   $(format_secondary "Speeds up the builds and does not use the network, but does not update crates.")
}

help() {
	printf "$(description)\n"
	echo ''
	printf "$(usage)\n"
	exit 0
}

# ===== ARGUMENT PARSING =====

case "${1:-local}" in
	--help) help ;;
	# Not cross-compiling.
	--*|local)
		change-build-target "$1" ;;
	*) change-build-target "$1" ;;
esac

if [ -z "${TARGET_PLATFORM}" ]; then
	info "Will build $(format_code $PROSE_POD_API_IMAGE) for the local platform."
else
	info "Will build $(format_code $PROSE_POD_API_IMAGE) for the $(format_code $TARGET_PLATFORM) platform."
fi

# Skip already interpreted argument.
# NOTE: We need to check the argument count because `shift`
#   will exit if the command was invoked with no argument.
# NOTE: We also have to check that the first argument doesn't match `--*`
#   in which case it would mean no `TARGET_PLATFORM` was passed.
[ "$#" -gt 0 ] && [[ "$1" != --* ]] && shift

CARGO_INSTALL_EXTRA_ARGS=()
unset NO_PULL

for arg in "$@"; do
	case $arg in
		--debug)
			info 'Will build in debug mode.'
			CARGO_INSTALL_EXTRA_ARGS+=('--profile=dev')
			;;
		--offline)
			die "Offline builds are not supported anymore, because we build the Rust project in the Dockerfile. If you need this feature, consider using $(format_hyperlink 'cargo-chef' 'https://github.com/LukeMathWalker/cargo-chef')."
			info 'Will build without accesing the network.'
			CARGO_INSTALL_EXTRA_ARGS+=('--offline')
			info 'Will not pull referenced Docker images.'
			NO_PULL=1
			;;
		--no-pull)
			info 'Will not pull referenced Docker images.'
			NO_PULL=1
			;;
		--help) help ;;
		*) die "Unknown argument: $(format_code $arg).\n$(usage)" ;;
	esac
done

# ===== MAIN LOGIC =====

edo docker buildx build \
	${DOCKER_TARGET_PLATFORM:+--platform "${DOCKER_TARGET_PLATFORM:?}"} \
	-t "${PROSE_POD_API_IMAGE:?}" \
	--build-arg CARGO_INSTALL_EXTRA_ARGS="${CARGO_INSTALL_EXTRA_ARGS[*]}" \
	${NO_PULL:+--pull=false} \
	"${PROSE_POD_API_DIR:?}"
