#!/bin/bash

# TODO: Count error and warning logs. Exit with 1 if at least one error encountered. Exit with 0 if a warning was encountered, and add a flag to consider it an error.

# Configure the script to exit when a command fails.
set -e

: ${SCRIPTS_ROOT:="$(dirname $0)"}
export SCRIPTS_ROOT
source "${SCRIPTS_ROOT:?}"/util.sh

# ===== CONSTANTS =====

: ${SELF:="$(basename $0)"}

source "${SCRIPTS_ROOT:?}"/constants.sh
: ${PROSE_POD_API_IMAGE_TAG:="${LOCAL_DOCKER_TAG:?}"}
export PROSE_POD_API_IMAGE_TAG
source "${SCRIPTS_ROOT:?}"/image-names.sh

test-env-vars 'CONTRIBUTING.md' \
	PROSE_POD_API_DIR

INTEGRATION_TESTS_DIR="${PROSE_POD_API_DIR:?}"/tests/integration
LOCAL_RUN_DIR="${PROSE_POD_API_DIR:?}"/local-run
STEPCI_DIR="${INTEGRATION_TESTS_DIR:?}"/step-ci
: ${INTEGRATION_TEST_HOST:=http://127.0.0.1:8080}
export ENV_FILE="${INTEGRATION_TESTS_DIR:?}"/in-memory.env
DNS_ZONES_DIR="${INTEGRATION_TESTS_DIR:?}"/dns-zones
export DNS_ZONE_FILE="${DNS_ZONES_DIR:?}"/working-static.zone
# NOTE: We don't want things like [stepci/stepci#239](https://github.com/stepci/stepci/issues/239)
#   to break the tests or the analytics server to slow down the tests execution.
export STEPCI_DISABLE_ANALYTICS=true
BASE_SCENARIO_NAME=integration-tests

# ===== ARGUMENT PARSING =====

ARGS_=()
for arg in "$@"; do
	case $arg in
		--api=*)
			export PROSE_POD_API_IMAGE_TAG="${arg#'--api='}"
			;;
		--server=*)
			export PROSE_POD_SERVER_IMAGE_TAG="${arg#'--server='}"
			;;
		--help) die 'Unsupported' ;;
		--dry-run) export DRY_RUN=1 ;;
		--debug) export LOG_DEBUG=1 ;;
		--trace) export LOG_TRACE=1 ;;
		*) ARGS_+=("$arg") ;;
	esac
done
# Update command args so we can then list test names.
set -- "${ARGS_[@]}"
unset ARGS_

# ===== MAIN LOGIC =====

start() {
	trace 'Starting the Prose Pod…'
	task local:run -- --detach --api=local --scenario="${BASE_SCENARIO_NAME:?}" --ephemeral --no-update
}

stop() {
	trace 'Stopping the Prose Pod…'
	task local:stop
}

abort() {
	stop
	task integration-test:logs
	exit 1
}

stepci_run() {
	local test_file=${1:?}
	local config_options=${2-test}

	info "${Blue}$(for _ in $(seq 72); do printf "="; done)${Color_Off}"
	info "${Blue}Running '$(sed "s#${STEPCI_DIR:?}/##" <<< "${test_file}")' with config '${config_options}'…${Color_Off}"
	info "${Blue}$(for _ in $(seq 72); do printf "="; done)${Color_Off}"

	export PROSE_CONFIG_FILE="${INTEGRATION_TESTS_DIR:?}/Prose-${config_options:?}.toml"
	# NOTE: We have to `cd $STEPCI_DIR` because transitive `$ref`s are not processed correctly otherwise.
	start && \
	{ (cd "${STEPCI_DIR:?}" && edo stepci run "${test_file#"${STEPCI_DIR:?}/"}" --env host="${INTEGRATION_TEST_HOST:?}") \
	&& { stop || die 'Could not stop properly.'; } || abort; }
}

if [ "$#" -eq 0 ]; then
	info "No test file provided. Will use all $(format_code '*.yaml') files in $(format_url "${STEPCI_DIR:?}")."
	# WARN: Spaces in `*.yaml` files will break.
	set -- $(cd "${STEPCI_DIR:?}"; find . -type f -name '*.yaml' | sed -E "s/\.\/(.+)\.yaml$/\1/")
fi

info "Will run tests on $(format_url ${INTEGRATION_TEST_HOST:?})."

# NOTE: Some tests need a different `PROSE_CONFIG_FILE` or `DNS_ZONE_FILE`. Special cases are handled here.
for arg in "$@"; do
	test_file="${STEPCI_DIR:?}/${arg:?}.yaml"

	if ! [ -e "$test_file" ]; then
		error "$(format_url "$test_file") not found, skipping."
		continue
	fi

	case $arg in
		*dns-configured-correctly-dynamic)
			DNS_ZONE_FILE="${DNS_ZONES_DIR:?}"/working-dynamic.zone stepci_run "$test_file" ;;
		*)
			stepci_run "$test_file" ;;
	esac
done
