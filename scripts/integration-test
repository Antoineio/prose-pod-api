#!/bin/bash

# Configure the script to exit when a command fails.
set -e

export SCRIPTS_ROOT="$(dirname $0)"
source "$(dirname $0)"/util.sh

# Redirect users to <CONTRIBUTING.md> if env vars are not set.
# NOTE: We still use `${X:?}` in the rest of the script, this is just to improve the dev UX.
# COPYRIGHT: <https://stackoverflow.com/a/65396324/10967642>.
test-env-vars() {
	var_names=("$@");
	for var_name in "${var_names[@]}"; do
		[ -z "${!var_name}" ] && echo "${var_name} isn't set. Check <CONTRIBUTING.md> for more information." && var_unset=true;
	done
	[ -n "$var_unset" ] && exit 1;
	return 0;
}
test-env-vars \
	PROSE_POD_API_DIR \
	PROSE_POD_SYSTEM_DIR;

INTEGRATION_TESTS_DIR="${PROSE_POD_API_DIR:?}"/tests/integration;
STEPCI_DIR="${INTEGRATION_TESTS_DIR:?}"/step-ci;
export INTEGRATION_TEST_HOST="${INTEGRATION_TEST_HOST-"http://127.0.0.1:8000"}"
export ENV_FILE="${PROSE_POD_API_DIR:?}"/tests/integration/in-memory.env;
export SERVER_ROOT="${PROSE_POD_SYSTEM_DIR:?}"/server/pod;
COMPOSE_FILE="${PROSE_POD_SYSTEM_DIR:?}"/compose.yaml;

cleanup() {
	trace 'Cleaning up the Prose Pod…'
	edo . "${PROSE_POD_SYSTEM_DIR:?}"/tools/cleanup;
}
start() {
	START_TIME=$(date +%s);
	cleanup;
	trace 'Starting the Prose Pod…'
	edo docker compose -f "${COMPOSE_FILE:?}" up --detach;
}
stop() {
	trace 'Stopping the Prose Pod…'
	edo docker compose -f "${COMPOSE_FILE:?}" stop;
}
abort() {
	stop;
	local current_time=$(date +%s);
	local elapsed_time=$((current_time - ${START_TIME:?}));
	edo docker compose -f "${COMPOSE_FILE:?}" logs --since "${elapsed_time}s" server api;
	exit 1;
}

stepci_run() {
	local test_file=${1:?};
	local config_options=${2-test};

	info "${Blue}$(for _ in $(seq 72); do printf "="; done)${Color_Off}";
	info "${Blue}Running '$(basename "${test_file}")' with config '${config_options}'…${Color_Off}";
	info "${Blue}$(for _ in $(seq 72); do printf "="; done)${Color_Off}";

	export PROSE_CONFIG_FILE="${INTEGRATION_TESTS_DIR:?}/Prose-${config_options:?}.toml";
	# NOTE: We have to `cd $STEPCI_DIR` because transitive `$ref`s are not processed correctly otherwise.
	start && \
	(cd "${STEPCI_DIR:?}" && edo stepci run "${test_file#"${STEPCI_DIR:?}/"}" --env host="'${INTEGRATION_TEST_HOST}'") \
	&& stop || abort;
}

if [ "$#" -eq 0 ]; then
	info "No arguments provided, using all $(format_code '*.yaml') files in $(format_url "${STEPCI_DIR:?}")…"
	# WARN: Spaces in `*.yaml` files will break not.
	set -- $(cd "${STEPCI_DIR:?}"; ls *.yaml | sed "s/\.yaml$//")
fi

# NOTE: Some tests need a different `PROSE_CONFIG_FILE`. Special cases are handled here.
for arg in "$@"; do
	test_file="${STEPCI_DIR:?}/${arg:?}.yaml";
	if ! [ -e "$test_file" ]; then
		error "$(format_url "$test_file") not found, skipping."
		continue
	fi
	case $arg in
		members)
			stepci_run "$test_file" test-auto_accept_invitations ;;
		*)
			stepci_run "$test_file" ;;
	esac
done

edo cleanup
